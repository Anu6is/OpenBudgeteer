@using OpenBudgeteer.Core.Common.EventClasses;
@using OpenBudgeteer.Core.Models;
@using OpenBudgeteer.Core.ViewModels;
@using System.Linq.Expressions;
@using System.Drawing;

<select class="form-select form-select-sm" style="background-color: @ColorTranslator.ToHtml(SelectedItem.Color)" @bind="SelectedItemId">
    @foreach (var availableBucket in AvailableItems)
    {
        <option style="background-color: @ColorTranslator.ToHtml(availableBucket.Color)"
            value="@availableBucket.BucketId">
            @availableBucket.Name
        </option>
    }
</select>

@code {
    private int _selectedItemId;
    // Required for Firefox to keep selection, see Issue #114
    private int SelectedItemId 
    {
        get => _selectedItemId;
        set
        {
            var oldValue = _selectedItemId;
            if (oldValue == value) return;
            _selectedItemId = value;
            hasSelectionChangedById = true;
            SelectedItem = AvailableItems.First(i => i.BucketId == value);
        }
    }

    private Bucket _selectedItem;
    [Parameter]
    public Bucket SelectedItem 
    {
        get => _selectedItem;
        set
        {
            // Initial set, skip all further logics
            if (_selectedItem == null)
            {
                _selectedItem = value;
                _selectedItemId = value.BucketId;
                return;
            }

            // Check if there is no real change
            if (_selectedItem.BucketId == value.BucketId &&
                SelectedItemId == value.BucketId) return;

            if (!hasSelectionChangedById)
            {
                // Change from outside, simulate Change coming from <select> and cancel setter
                SelectedItemId = value.BucketId;
                return;
            }
            var oldValue = _selectedItem;
            _selectedItem = value;
            SelectedItemChanged.InvokeAsync(value);
            OnSelectedItemChanged.InvokeAsync(new ChangeEventArgs() { Value = value });
            hasSelectionChangedById = false;
        }
    }

    [Parameter]
    public EventCallback<Bucket> SelectedItemChanged { get; set; }

    [Parameter]
    public IEnumerable<Bucket> AvailableItems { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> OnSelectedItemChanged { get; set; }

    bool hasSelectionChangedById;
}
