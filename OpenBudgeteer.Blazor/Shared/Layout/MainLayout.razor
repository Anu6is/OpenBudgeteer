@implements IDisposable

@inherits LayoutComponentBase

@using Microsoft.EntityFrameworkCore
@using OpenBudgeteer.Core.Data.Entities

@inject DbContextOptions<DatabaseContext> DbContextOptions
@inject PreferenceManager PreferenceManager
@inject NavigationManager NavigationManager

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
     <TopNavMenu SideMenuDrawerOpen="@_preferences.MiniDrawer" ToggleSideMenuDrawer="SideMenuToggleAsync"
                 DarkModeEnabled="@_preferences.DarkMode" ToggleThemeMode="ToggleThemeAsync"/>
    
    <CascadingValue Value="@MenuItem">
        <SideNavMenu SideMenuDrawerOpen="@_preferences.MiniDrawer" />
    </CascadingValue>
    
    <MudMainContent Style="height: 100vh">
        <MudContainer MaxWidth="MaxWidth.Large" Class="px-8 pt-4">
            <ErrorBoundary @ref="_errorBoundary">
                <ChildContent>
                    <CascadingValue Value="@_preferences.DarkMode">
                        @Body
                    </CascadingValue>
                </ChildContent>
                <ErrorContent Context="error">
                    <MudStack Class="relative ma-8" AlignItems="AlignItems.Center" Justify="Justify.Center">
                        <MudText Typo="Typo.h6">Oops... Looks like something went wrong!</MudText>
                        <MudImage Src="./img/pair_programming.svg" Alt="@error.Message" @onclick="ToggleOverlay"
                                    Fluid="true" ObjectFit="ObjectFit.ScaleDown" ObjectPosition="ObjectPosition.Center" />
                        <MudText Typo="Typo.h6">Hang Tight! Our team is hard at work figuring this out...</MudText>
                    </MudStack>
                    <MudOverlay Absolute="true" DarkBackground="true" Visible="@ShowOverlay" OnClick="@ToggleOverlay">
                        <MudCard Style="padding-left:180px; padding-top:24px">
                            <MudCardHeader>
                                <MudText Typo="Typo.h6">@error.Source</MudText>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudText Typo="Typo.body1">@error.Message</MudText>
                            </MudCardContent>
                            <MudCardActions>
                                <MudText Typo="Typo.subtitle1">@error.TargetSite?.ToString()</MudText>
                            </MudCardActions>
                        </MudCard>
                    </MudOverlay>
                </ErrorContent>
            </ErrorBoundary>
        </MudContainer>
    </MudMainContent> 
</MudLayout>

@code {
    private Preferences _preferences = new();
    private bool ShowOverlay { get; set; }
    private string MenuItem { get; set; } = "";

    private ErrorBoundary? _errorBoundary;

    protected override void OnParametersSet()
    {
        _errorBoundary?.Recover();
    }

    protected override async Task OnInitializedAsync()
    {
        _preferences = await PreferenceManager.LoadPreferencesAsync();

        NavigationManager.LocationChanged += LocationChanged;

        await base.OnInitializedAsync();
    }

    private async Task SideMenuToggleAsync(bool value)
    {
        _preferences = await PreferenceManager.ModifyPreferencesAsync(x => x.MiniDrawer = value);
    }

    async Task ToggleThemeAsync(bool value) 
    {
        _preferences = await PreferenceManager.ModifyPreferencesAsync(x => x.DarkMode = value);

    }

    private void ToggleOverlay() => ShowOverlay = !ShowOverlay;

    public void LocationChanged(object? sender, LocationChangedEventArgs args)
    {
        MenuItem = NavigationManager.ToBaseRelativePath(args.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= LocationChanged;
    }
}