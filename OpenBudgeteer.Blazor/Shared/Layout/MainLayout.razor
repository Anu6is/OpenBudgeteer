@implements IDisposable
@inherits LayoutComponentBase

@inject PreferenceManager PreferenceManager
@inject NavigationManager NavigationManager
@inject DrawerService DrawerService

<MudThemeProvider @bind-IsDarkMode="@_preferences.DarkMode" Theme="@CustomTheme" />
<MudDialogProvider />
<MudPopoverProvider />
<MudSnackbarProvider />

<MudLayout>
    <TopNavMenu SideMenuDrawerOpen="@_preferences.MiniDrawer" ToggleSideMenuDrawer="SideMenuToggleAsync"
                 DarkModeEnabled="@_preferences.DarkMode" ToggleThemeMode="ToggleThemeAsync"/>
    
    <CascadingValue Value="@MenuItem">
        <SideNavMenu SideMenuDrawerOpen="@_preferences.MiniDrawer" />
    </CascadingValue>

    <Condition Evaluation="@DrawerService.DrawerOpen">
        <Match>
            <MudDrawer Class="d-flex pr-4" Open Overlay="false" Elevation="5" Width="25vw"
                       Style="min-width:425px;" ClipMode="DrawerClipMode.Always" Anchor="Anchor.Right" 
                       Variant="@DrawerVariant.Temporary" Fixed>
                <MudDrawerHeader Class="justify-center" Dense>
                    <MudText Typo="Typo.h6">@DrawerTitle</MudText>
                </MudDrawerHeader>
                @DrawerContent
                <MudSpacer />
                <MudButton Class="my-8" Color="Color.Inherit" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Close"
                           Style="width:fit-content; min-height:25px; align-self:center;"
                           OnClick="@(() => DrawerService.ToggleDrawer())">
                    Close
                </MudButton>
            </MudDrawer>
            <MudOverlay Visible DarkBackground="true" LockScroll="false" />
        </Match>
    </Condition>
    
     <MudMainContent Style="height: 100vh">
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="px-8 pt-4">
            <ErrorBoundary @ref="_errorBoundary">
                <ChildContent>
                    <CascadingValue Value="@_preferences.DarkMode">
                        @Body
                    </CascadingValue>
                </ChildContent>
                <ErrorContent Context="error">
                    <ErrorMessage Error="@error" />
                </ErrorContent>
            </ErrorBoundary>
        </MudContainer>
    </MudMainContent> 
</MudLayout>

@code {
    private RenderFragment? DrawerContent { get; set; }

    private Preferences _preferences = new();
    private ErrorBoundary? _errorBoundary;

    private string? DrawerTitle { get; set; }
    private string MenuItem { get; set; } = "";

    public MudTheme CustomTheme => new()
    {
        PaletteLight = new PaletteLight()
        {
            Primary = Colors.Teal.Default,
            AppbarBackground = Colors.Teal.Default,
            Surface = Colors.Teal.Lighten5,
            Secondary = Colors.Teal.Lighten3
        },
        PaletteDark = new PaletteDark()
        {
            Primary = Colors.Teal.Default,
            AppbarBackground = Colors.Teal.Default,
            Secondary = Colors.Teal.Darken2
        }
    };

    protected override void OnParametersSet()
    {
        _errorBoundary?.Recover();
    }

    protected override async Task OnInitializedAsync()
    {
        _preferences = await PreferenceManager.LoadPreferencesAsync();

        NavigationManager.LocationChanged += LocationChanged;
        DrawerService.OnDrawerStateChanged += DrawerStateChanged;
        DrawerService.OnRenderFragmentChanged += RenderFragmentChanged;

        await base.OnInitializedAsync();
    }

    private async Task SideMenuToggleAsync(bool value)
    {
        _preferences = await PreferenceManager.ModifyPreferencesAsync(x => x.MiniDrawer = value);
    }

    async Task ToggleThemeAsync(bool value) 
    {
        _preferences = await PreferenceManager.ModifyPreferencesAsync(x => x.DarkMode = value);
    }

    private void LocationChanged(object? sender, LocationChangedEventArgs args)
    {
        if (DrawerService.DrawerOpen) DrawerService.ToggleDrawer();

        MenuItem = NavigationManager.ToBaseRelativePath(args.Location);

        StateHasChanged();
    }

    private void DrawerStateChanged(string title)
    {
        DrawerTitle = title;

        StateHasChanged();
    }

    private void RenderFragmentChanged(RenderFragment renderFragment)
    {
        DrawerContent = renderFragment;

        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= LocationChanged;
        DrawerService.OnDrawerStateChanged -= DrawerStateChanged;
        DrawerService.OnRenderFragmentChanged -= RenderFragmentChanged;
    }
}