@page "/transaction"
@using System.Drawing
@using System.Globalization
@using OpenBudgeteer.Core.Common.Extensions

<div class="row align-items-center">
    <div class="col">
        @if (_massEditEnabled)
        {
            <button class="btn btn-sm btn-primary header-action-button" @onclick="@SaveAllTransaction">Save all</button>
            <button class="btn btn-sm btn-danger header-action-button" @onclick="@CancelAllTransaction">Cancel all</button>
        }
        else
        {
            <button class="btn btn-sm btn-primary header-action-button" @onclick="@StartCreateNewTransaction">Create Transaction</button>
            <button class="btn btn-sm btn-primary header-action-button" @onclick="@EditAllTransaction">Edit all</button>
            <button class="btn btn-sm btn-primary header-action-button" @onclick="@(async () => await ProposeBucketsAsync())">Propose Buckets</button>
            <div class="btn-group">
                <button type="button" class="btn btn-sm btn-primary" @onclick="@AddRecurringTransactions">Add Recurring Transactions</button>
                <button type="button" class="btn btn-sm btn-primary dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
                <span class="visually-hidden">Toggle Dropdown</span>
                </button>
                <ul class="dropdown-menu">
                    <li><a class="dropdown-item dropdown-item-sm" role="button" @onclick="@(async () => await DisplayRecurringTransactions())">Manage</a></li>
                </ul>
            </div>
        }
    </div>
    <div class="col-md-auto">
        <select class="form-select form-select-sm" style="width: auto"
                @bind:get="_dataContext.CurrentFilter.ToString()"
                @bind:set="Filter_SelectionChanged">
            @foreach (var filter in Enum.GetValues<TransactionFilter>())
            {
                <option value="@filter">@filter.GetStringValue()</option>
            }
        </select>
    </div>
    <YearMonthSelector DataContext="YearMonthDataContext" />
</div>

@if (_newTransactionEnabled)
{
    <table class="table table-sm">
        <thead>
            <tr>
                <th style="text-align: right; width:100px">Date</th>
                <th style="width:150px">Account</th>
                <th style="width:250px">Payee</th>
                <th>Memo</th>
                <th style="text-align: right; width: 120px">Amount</th>
                <th style="width:300px">Buckets</th>
                <th style="width:1px" />
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <input class="form-control form-control-sm number-input" type="date" @bind="_dataContext.NewTransaction!.Transaction.TransactionDate" />
                </td>
                <td>
                    <select class="form-select form-select-sm"
                            @bind:get="_dataContext.NewTransaction.Transaction.Account!.Id.ToString()"
                            @bind:set="NewTransactionAccount_SelectionChanged">
                        @foreach (var account in _dataContext.NewTransaction.AvailableAccounts)
                        {
                            <option value="@account.Id">@account.Name</option>
                        }
                    </select>
                </td>
                <td><input class="form-control form-control-sm" type="text" @bind="_dataContext.NewTransaction.Transaction.Payee" /></td>
                <td><textarea class="form-control form-control-sm" rows="1" @bind="_dataContext.NewTransaction.Transaction.Memo"></textarea></td>
                <td><input class="form-control form-control-sm number-input" type="number" @bind="_dataContext.NewTransaction.Transaction.Amount" /></td>
                <td>
                    <table class="table" style="margin-bottom: auto">
                        <tbody>
                            @foreach (var bucket in _dataContext.NewTransaction.Buckets)
                            {
                                <tr>
                                    <td>
                                        <button class="btn btn-sm btn-bucket" style="background-color: @ColorTranslator.ToHtml(bucket.SelectedBucket.Color)" @onclick="() => HandleShowBucketSelectDialog(bucket)">
                                            @bucket.SelectedBucket.Name
                                        </button>
                                    </td>
                                    <td style="width: 90px"><input class="form-control form-control-sm number-input" type="number" @bind="bucket.Amount" /></td>
                                    <td style="width: 1px"><button class="btn btn-sm btn-danger bi bi-trash3" @onclick="@(() => bucket.DeleteBucket())"></button></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                                    
                    @if (_dataContext.NewTransaction.Difference != 0)
                    {
                        <div class="row bucket-indicator" style="background-color: deepskyblue">
                            <div class="col">Remaining</div>
                            <div class="col-md-auto col-numbers">@(_dataContext.NewTransaction.Difference)</div>
                        </div>
                    }
                </td>
                <td class="col-buttons">
                    <button class="btn btn-sm btn-primary" @onclick="@(() => SplitTransaction(_dataContext.NewTransaction))"><i class="bi bi-diagram-2"></i></button>
                    <button class="btn btn-sm btn-primary bi bi-check-lg" @onclick="@(() => HandleResult(_dataContext.CreateItem()))"></button>
                    <button class="btn btn-sm btn-danger bi bi-x-lg" @onclick="@CancelNewTransaction"></button>
                </td>
            </tr>
        </tbody>
    </table>
}

<table class="table table-sm table-hover">
    <thead>
    <tr class="header-row">
        <th style="text-align: right; width:100px">Date</th>
        <th style="width:150px">Account</th>
        <th style="width:250px">Payee</th>
        <th>Memo</th>
        <th style="text-align: right; width: 120px">Amount</th>
        <th style="width:300px">Buckets</th>
        <th style="width:120px" />
    </tr>
    </thead>
    <tbody>
    @foreach (var transaction in _dataContext.Transactions)
    {
        @if (transaction.InModification)
        {
            <tr>
                <td>
                    <input class="form-control form-control-sm number-input" type="date" @bind="transaction.Transaction.TransactionDate" />
                </td>
                <td>
                    <select class="form-select form-select-sm"
                            @bind:get="transaction.Transaction.Account!.Id.ToString()"
                            @bind:set="(value) => { TransactionAccount_SelectionChanged(value, transaction); }">
                        @foreach (var account in transaction.AvailableAccounts)
                        {
                            <option value="@account.Id">@account.Name</option>
                        }
                    </select>
                </td>
                <td><input class="form-control form-control-sm" type="text" @bind="transaction.Transaction.Payee" /></td>
                <td><textarea class="form-control form-control-sm" rows="1" @bind="transaction.Transaction.Memo"></textarea></td>
                <td><input class="form-control form-control-sm number-input" type="number" @bind="transaction.Transaction.Amount" /></td>
                <td>
                    <table class="table table-borderless" style="margin-bottom: auto;">
                        <tbody>
                            @foreach (var bucket in transaction.Buckets)
                            {
                                <tr>
                                    <td>
                                        <button class="btn btn-sm btn-bucket" style="background-color: @ColorTranslator.ToHtml(bucket.SelectedBucket.Color)" @onclick="() => HandleShowBucketSelectDialog(bucket)">
                                            @bucket.SelectedBucket.Name
                                        </button>
                                    </td>
                                    <td style="width: 90px"><input class="form-control form-control-sm number-input" type="number" @bind="bucket.Amount" /></td>
                                    <td style="width: 1px"><button class="btn btn-sm btn-danger bi bi-trash3" @onclick="@(() => bucket.DeleteBucket())"></button></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                                    
                    @if (transaction.Difference != 0)
                    {
                        <div class="row bucket-indicator" style="background-color: deepskyblue">
                            <div class="col">Remaining</div>
                            <div class="col-md-auto col-numbers">@(transaction.Difference)</div>
                        </div>
                    }
                </td>
                <td class="col-buttons">
                    <button class="btn btn-sm btn-primary" @onclick="@(() => SplitTransaction(transaction))"><i class="bi bi-diagram-2"></i></button>
                    <button class="btn btn-sm btn-primary bi bi-check-lg" @onclick="@(() => SaveTransaction(transaction))"></button>
                    <button class="btn btn-sm btn-danger bi bi-x-lg" @onclick="@(() => transaction.CancelModification())"></button>
                </td>
            </tr>
        }
        else
        {
            <tr>
                <td class="col-numbers">@transaction.Transaction.TransactionDate.ToShortDateString()</td>
                <td>@transaction.Transaction.Account!.Name</td>
                <td>@transaction.Transaction.Payee</td>
                <td>@transaction.Transaction.Memo</td>
                <td class="col-numbers">@transaction.Transaction.Amount.ToString("C", CultureInfo.CurrentCulture)</td>
                <td style="vertical-align: middle">
                    @foreach (var bucket in transaction.Buckets)
                    {
                        <div class="row bucket-indicator" style="background-color: @ColorTranslator.ToHtml(bucket.SelectedBucket.Color)">
                            <div class="col">@bucket.SelectedBucket.Name</div>
                            <div class="col-md-auto col-numbers">@bucket.Amount.ToString("C", CultureInfo.CurrentCulture)</div>
                        </div>
                    }
                </td>
                <td class="col-buttons">
                    <button class="btn btn-sm btn-primary bi bi-pencil" @onclick="@(() => transaction.StartModification())"></button>
                    <button class="btn btn-sm btn-danger bi bi-trash3" @onclick="@(() => HandleShowDeletionTransactionDialog(transaction))"></button>
                </td>
            </tr>
        }
    }
    </tbody>
</table>

@if (_isProposeBucketsInfoDialogVisible)
{
    <div class="modal fade show" style=" display: block;">
        <div class="modal-dialog modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Propose Buckets</h4>
                </div>
                <div class="modal-body">Searching Buckets based on defined rules...</div>
                <div class="modal-footer"></div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<RecurringTransactionDialog
    DataContext="@_recurringTransactionHandlerViewModel"
    IsDialogVisible="@_isRecurringTransactionModalDialogVisible"
    OnClickCallback="@(() => _isRecurringTransactionModalDialogVisible = false)"/>

<BucketSelectDialog
    DataContext="@_bucketSelectDialogDataContext"
    IsDialogVisible="@_isBucketSelectDialogVisible"
    IsDialogLoading="@_isBucketSelectDialogLoading"
    OnBucketSelectedCallback="UpdateSelectedBucket"
    OnCancelCallback="@(() => _isBucketSelectDialogVisible = false)"/>

<DeleteConfirmationDialog 
    Title="Delete Transaction" 
    Message="Do you really want to delete this Transaction?" 
    IsDialogVisible="@_isDeleteTransactionDialogVisible"
    OnDeleteClickCallback="DeleteTransaction"
    OnCancelClickCallback="CancelDeleteTransaction"/>

<ErrorMessageDialog 
    Title="Transaction" 
    Message="@_errorModalDialogMessage" 
    IsDialogVisible="@_isErrorModalDialogVisible"
    OnClickCallback="@(() => _isErrorModalDialogVisible = false)"/>
