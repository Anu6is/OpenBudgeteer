@page "/rules"

@using Microsoft.EntityFrameworkCore
@using OpenBudgeteer.Core.Common
@using OpenBudgeteer.Core.ViewModels
@using OpenBudgeteer.Core.ViewModels.ItemViewModels
@using System.Drawing
@using OpenBudgeteer.Core.Models
@inject DbContextOptions<DatabaseContext> DbContextOptions

<style>
	.btn-margin-bottom {
        margin-bottom: 5px;
    }
    .btn-margin-left {
        margin-left: 5px;
    }
    .td-right {
        text-align: right;
    }
    .td-button {
        text-align: center;
    }
	.input-right {
        text-align: right;
    }
</style>

<div class="row">
    @if (_massEditEnabled)
    {
        <button class="btn btn-sm btn-primary btn-margin btn-margin-left" @onclick="@SaveAllRules">Save all</button>
        <button class="btn btn-sm btn-danger btn-margin btn-margin-left" @onclick="@CancelAllRules">Cancel all</button>
    }
    else
    {
        <button class="btn btn-sm btn-primary btn-margin-bottom btn-margin-left" @onclick="@(() => _newMappingRuleSetIsEnabled = true)">Create Rule</button>
        <button class="btn btn-sm btn-primary btn-margin-bottom btn-margin-left" @onclick="@EditAllRules">Edit all</button>
    }
</div>

@if (_newMappingRuleSetIsEnabled)
{
	<table class="table table-sm table-hover">
        <thead>
        <tr>
            <th style="text-align: right; width:110px">Priority</th>
            <th style="width:250px">Rule Name</th>
            <th style="width:300px">Target Bucket</th>
            <th>Mapping Rules</th>
        </tr>
        </thead>
        <tbody>
            <tr>
                <td class="td-right"><input class="form-control form-control-sm input-right" type="number" @bind="_dataContext.NewRuleSet.RuleSet.Priority" /></td>
                <td><input class="form-control form-control-sm" type="text" @bind="_dataContext.NewRuleSet.RuleSet.Name" /></td>
                <td>
                    <select class="form-control form-control-sm" style="background-color: @ColorTranslator.ToHtml(_dataContext.NewRuleSet.TargetBucket.Color)"
                            @onchange=@(e => HandleTargetBucketSelectionChanged(_dataContext.NewRuleSet, Convert.ToInt32(e.Value)))>
                        @foreach (var availableBucket in _dataContext.NewRuleSet.AvailableBuckets)
                        {
                            if (_dataContext.NewRuleSet.TargetBucket.BucketId == availableBucket.BucketId)
                            {
								<option selected style="background-color: @ColorTranslator.ToHtml(availableBucket.Color)" value="@availableBucket.BucketId">@availableBucket.Name</option>
                            }
                            else
                            {
                                <option style="background-color: @ColorTranslator.ToHtml(availableBucket.Color)" value="@availableBucket.BucketId">@availableBucket.Name</option>    
                            }
                        }
                    </select>
                </td>
                <td>
                    @foreach (var mappingRule in _dataContext.NewRuleSet.MappingRules)
                    {
                        <div class="row align-items-center" style="margin-bottom: 5px 0">
                            <div class="col-md-auto">
                                <select class="form-control form-control-sm"
                                        @onchange=@(e => mappingRule.MappingRule.ComparisionField = Convert.ToInt32(e.Value))>
                                    @for (int i = 1; i <= 4; i++)
                                    {
                                        if (mappingRule.MappingRule.ComparisionField == i)
                                        {
                                            <option selected value="@i">@(new MappingRule(){ ComparisionField = i}.ComparisonFieldOutput)</option>
                                        }
                                        else
                                        {
                                            <option value="@i">@(new MappingRule(){ ComparisionField = i}.ComparisonFieldOutput)</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div class="col-md-auto">
                                <select class="form-control form-control-sm"
                                        @onchange=@(e => mappingRule.MappingRule.ComparisionType = Convert.ToInt32(e.Value))>
                                    @for (int i = 1; i <= 4; i++)
                                    {
                                        if (mappingRule.MappingRule.ComparisionType == i)
                                        {
                                            <option selected value="@i">@(new MappingRule(){ ComparisionType = i}.ComparisionTypeOutput)</option>
                                        }
                                        else
                                        {
                                            <option value="@i">@(new MappingRule(){ ComparisionType = i}.ComparisionTypeOutput)</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div class="col">
                                <input class="form-control form-control-sm" type="text" @bind="mappingRule.MappingRule.ComparisionValue" />
                            </div>
                            <div class="col-md-auto" style="vertical-align: center">
                                <button class="btn btn-sm btn-primary oi oi-plus" @onclick="@(() => _dataContext.NewRuleSet.AddEmptyMappingRule())"></button>
                                <button class="btn btn-sm btn-danger oi oi-x" @onclick="@(() => _dataContext.NewRuleSet.DeleteMappingRule(mappingRule))"></button>
                            </div>
                        </div>
                    }
                </td>
                <td class="td-button" style="text-align: right; vertical-align: middle;">
                    <button class="btn btn-sm btn-primary oi oi-check" @onclick="@(() => HandleResult(_dataContext.CreateNewRuleSet()))"></button>
                    <button class="btn btn-sm btn-danger oi oi-x" @onclick="@CancelNewBucketRule"></button>
                </td>
            </tr>
        </tbody>
    </table>
}

<table class="table table-sm table-hover">
    <thead>
    <tr>
        <th style="text-align: right; width:110px">Priority</th>
        <th style="width:250px">Rule Name</th>
        <th style="width:300px">Target Bucket</th>
        <th>Mapping Rules</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var ruleSet in _dataContext.RuleSets)
    {
        @if (ruleSet.InModification)
        {
            <tr>
                <td class="td-right"><input class="form-control form-control-sm input-right" type="number" @bind="ruleSet.RuleSet.Priority" /></td>
                <td><input class="form-control form-control-sm" type="text" @bind="ruleSet.RuleSet.Name" /></td>
                <td>
                    <select class="form-control form-control-sm" style="background-color: @ColorTranslator.ToHtml(ruleSet.TargetBucket.Color)"
                            @onchange=@(e => HandleTargetBucketSelectionChanged(ruleSet, Convert.ToInt32(e.Value)))>
                        @foreach (var availableBucket in ruleSet.AvailableBuckets)
                        {
                            if (ruleSet.RuleSet.TargetBucketId == availableBucket.BucketId)
                            {
                                <option selected style="background-color: @ColorTranslator.ToHtml(availableBucket.Color)" value="@availableBucket.BucketId">@availableBucket.Name</option>
                            }
                            else
                            {
                                <option style="background-color: @ColorTranslator.ToHtml(availableBucket.Color)" value="@availableBucket.BucketId">@availableBucket.Name</option>
                            }
                        }
                    </select>
                </td>
                
                <td>
                    
                    @foreach (var mappingRule in ruleSet.MappingRules)
                    {
                        <div class="row align-items-center" style="margin-bottom: 5px 0">
                            <div class="col-md-auto">
                                <select class="form-control form-control-sm"
                                        @onchange=@(e => mappingRule.MappingRule.ComparisionField = Convert.ToInt32(e.Value))>
                                    @for (int i = 1; i <= 4; i++)
                                    {
                                        if (mappingRule.MappingRule.ComparisionField == i)
                                        {
                                            <option selected value="@i">@(new MappingRule(){ ComparisionField = i}.ComparisonFieldOutput)</option>
                                        }
                                        else
                                        {
                                            <option value="@i">@(new MappingRule(){ ComparisionField = i}.ComparisonFieldOutput)</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div class="col-md-auto">
                                <select class="form-control form-control-sm"
                                        @onchange=@(e => mappingRule.MappingRule.ComparisionType = Convert.ToInt32(e.Value))>
                                    @for (int i = 1; i <= 4; i++)
                                    {
                                        if (mappingRule.MappingRule.ComparisionType == i)
                                        {
                                            <option selected value="@i">@(new MappingRule(){ ComparisionType = i}.ComparisionTypeOutput)</option>
                                        }
                                        else
                                        {
                                            <option value="@i">@(new MappingRule(){ ComparisionType = i}.ComparisionTypeOutput)</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div class="col">
                                <input class="form-control form-control-sm" type="text" @bind="mappingRule.MappingRule.ComparisionValue" />
                            </div>
                            <div class="col-md-auto" style="vertical-align: center">
                                <button class="btn btn-sm btn-primary oi oi-plus" @onclick="@(() => ruleSet.AddEmptyMappingRule())"></button>
                                <button class="btn btn-sm btn-danger oi oi-x" @onclick="@(() => ruleSet.DeleteMappingRule(mappingRule))"></button>
                            </div>
                        </div>
                    }
                </td>
                <td class="td-button" style="text-align: right; vertical-align: middle;">
					<button class="btn btn-sm btn-primary oi oi-check" @onclick="@(() => HandleResult(_dataContext.SaveRuleSetItem(ruleSet)))"></button>
                    <button class="btn btn-sm btn-danger oi oi-x" @onclick="@(() => ruleSet.CancelModification())"></button>
                </td>
            </tr>
        }
        else
        {
            <tr @onmouseover="() => ruleSet.IsHovered = true" @onmouseout="() => ruleSet.IsHovered = false">
                <td class="td-right">@ruleSet.RuleSet.Priority</td>
                <td>@ruleSet.RuleSet.Name</td>
                <td><div style="background-color: @ColorTranslator.ToHtml(ruleSet.TargetBucket.Color); border-radius: 25px; padding: 5px 10px">@ruleSet.TargetBucket.Name</div></td>
                <td>
                    <ul>
                        @foreach (var mappingRule in ruleSet.MappingRules)
                        {
                            <li>@mappingRule.RuleOutput</li>
                        }
                    </ul>
                </td>
                <td class="td-button" style="text-align: right; vertical-align: middle">
                    @if (ruleSet.IsHovered)
                    {
                        <button class="btn btn-sm btn-primary oi oi-pencil" @onclick="@(() => ruleSet.StartModification())"></button>
                        <button class="btn btn-sm btn-danger oi oi-trash" @onclick="@(() => HandleRuleSetDeletionRequest(ruleSet))"></button>
                    }
                </td>
            </tr>
        }
    }
    </tbody>
</table>

<DeleteConfirmationDialog 
    Title="Delete Transaction" 
    Message="Do you really want to delete this Transaction?" 
    IsDialogVisible="@_isDeleteRuleSetModalDialogVisible"
    OnDeleteClickCallback="DeleteRule"
    OnCancelClickCallback="CancelDeleteRule"/>

<ErrorMessageDialog 
    Title="Rules" 
    Message="@_errorModalDialogMessage" 
    IsDialogVisible="@_isErrorModalDialogVisible"
    OnClickCallback="@(() => _isErrorModalDialogVisible = false)"/>

@code {
    RulesViewModel _dataContext;
    bool _massEditEnabled;
    bool _newMappingRuleSetIsEnabled;

    bool _isDeleteRuleSetModalDialogVisible;
    RuleSetViewModelItem _ruleSetToBeDeleted;

    bool _isErrorModalDialogVisible;
    string _errorModalDialogMessage;

    protected override async Task OnInitializedAsync()
    {
        _dataContext = new RulesViewModel(DbContextOptions);

        HandleResult(await _dataContext.LoadDataAsync());
        _dataContext.ViewModelReloadRequired += async (sender) =>
        {
            HandleResult(await _dataContext.LoadDataAsync());
            base.StateHasChanged();
        };
    }

    void HandleTargetBucketSelectionChanged(RuleSetViewModelItem ruleSetViewModelItem, int selectedBucketId)
    {
        ruleSetViewModelItem.TargetBucket = ruleSetViewModelItem.AvailableBuckets.First(i => i.BucketId == selectedBucketId);
		ruleSetViewModelItem.RuleSet.TargetBucketId = ruleSetViewModelItem.TargetBucket.BucketId;
    }

	void CancelNewBucketRule()
    {
        _newMappingRuleSetIsEnabled = false;
        _dataContext.ResetNewRuleSet();
    }

    void EditAllRules()
    {
        _massEditEnabled = true;
        _dataContext.EditAllRules();
    }

    void SaveAllRules()
    {
        _massEditEnabled = false;
        HandleResult(_dataContext.SaveAllRules());
    }

    void CancelAllRules()
    {
        _massEditEnabled = false;
        _dataContext.CancelAllRules();
    }

	void HandleRuleSetDeletionRequest(RuleSetViewModelItem ruleSet)
    {
        _ruleSetToBeDeleted = ruleSet;
        _isDeleteRuleSetModalDialogVisible = true;
    }

	void CancelDeleteRule()
    {
        _isDeleteRuleSetModalDialogVisible = false;
        _ruleSetToBeDeleted = null;
    }

    void DeleteRule()
    {
        _isDeleteRuleSetModalDialogVisible = false;
        HandleResult(_dataContext.DeleteRuleSetItem(_ruleSetToBeDeleted));
    }

    void HandleResult(Tuple<bool, string> result)
    {
        var (success, errorMessage) = result;
        if (!success)
        {
            _errorModalDialogMessage = errorMessage;
            _isErrorModalDialogVisible = true;
        }
    }
}
