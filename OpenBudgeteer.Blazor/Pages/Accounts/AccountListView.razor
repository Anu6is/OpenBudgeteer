@inject CurrencyProvider CurrencyProvider
@inject DrawerService DrawerService

<MudPaper Class="flex-grow-1 mud-background" Elevation="0" MinHeight="55px" MinWidth="250px" MaxWidth="800px">
    <MudStack Class="d-flex">
        <Condition Evaluation="@(_uniqueCurrencies.Length > 0)">
            <Match>
                <MudButtonGroup Class="align-self-end" OverrideStyles="false">
                    <Iteration Items="@_uniqueCurrencies" Context="currency">
                        <MudButton Color="Color.Primary" Size="Size.Small" OnClick="@(() => SelectCurrencyAccounts(currency))"
                                   Variant="@(currency == SelectedCurrency?.IsoCode ? Variant.Filled : Variant.Outlined)"
                                   Disabled="@(_uniqueCurrencies.Length < 2)">
                            @currency
                        </MudButton>
                    </Iteration>
                </MudButtonGroup>
            </Match>
        </Condition>
        <MudExpansionPanels MultiExpansion="true" Elevation="3">
            <Iteration Items="@CurrencyAccounts">
                <MudExpansionPanel Expanded="@ExpandedPanels.Contains(context.DisplayName)" ExpandedChanged="@((isExpanded) => Expanded(context.DisplayName, isExpanded))">
                    <TitleContent>
                        <MudStack Row="true" Class="d-flex flex-wrap">
                            <MudIcon Icon="@context.Icon" class="mr-3"></MudIcon>
                            <MudText Class="header-text" Typo="Typo.h6">@context.DisplayName</MudText>
                            <Condition Evaluation="@(ExpandedPanels.Contains(context.DisplayName) is false)">
                                <Match>
                                    <MudHidden Breakpoint="Breakpoint.SmAndDown">
                                        <MudSpacer />
                                        <MudText Class="mr-n2 header-text" Inline="true" Typo="Typo.h6">
                                            @context.Accounts.Sum(x => (decimal)x.Balance).ToString("C", _customCulture)
                                        </MudText>
                                        <MudText Class="mr-4 align-self-end" Inline="true" Typo="Typo.caption">
                                            @context.Accounts.First().Currency!.IsoCode
                                        </MudText>
                                    </MudHidden>
                                </Match>
                            </Condition>
                        </MudStack>
                    </TitleContent>
                    <ChildContent>
                        <Iteration Items="@context.Accounts" Context="account">
                            <MudStack Row="true" Class="d-flex flex-wrap" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd">
                                <Condition Evaluation="@(!account.IsActive)">
                                    <Match>
                                        <MudIcon Icon="@Icons.Material.Filled.DisabledVisible" Size="Size.Small" />
                                    </Match>
                                    <NotMatch>
                                        <MudIcon Size="Size.Small" />
                                    </NotMatch>
                                </Condition>
                                <MudText Class="pl-4" Inline="true" Typo="Typo.subtitle1">@(string.IsNullOrEmpty(account.Alias) ? account.Name : account.Alias)</MudText>
                                <MudSpacer />
                                <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd" Spacing="0">
                                    <MudText Inline="true" Typo="Typo.subtitle1">@(((decimal)account.Balance).ToString("C", _customCulture))</MudText>
                                    <MudHidden Breakpoint="Breakpoint.SmAndDown">
                                        <MudText Class="pl-1 pt-1" Inline="true" Typo="Typo.caption">@account.Currency!.IsoCode</MudText>
                                    </MudHidden>
                                    <MudMenu Class="align-self-end mr-n3" Icon="@Icons.Material.Filled.MoreVert" Dense="true"
                                                AnchorOrigin="Origin.CenterLeft" TransformOrigin="Origin.TopRight">
                                        <MudMenuItem Icon="@Icons.Material.Filled.Edit" IconSize="Size.Small" OnClick="@(() => EditAccount(account))">Edit</MudMenuItem>
                                        <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconSize="Size.Small" IconColor="Color.Error" OnClick="@(() => DeleteAccount(account))">Delete</MudMenuItem>
                                    </MudMenu>
                                </MudStack>
                            </MudStack>
                        </Iteration>
                    </ChildContent>
                </MudExpansionPanel>
            </Iteration>
        </MudExpansionPanels>
    </MudStack>
</MudPaper>
<Condition Evaluation="SelectedCurrency is not null">
    <Match>
        <BalanceSummary Currency="@SelectedCurrency" Savings="@SavingsSummary()" Loans="LoanSummary()" NetWorth="NetWorth()" />
    </Match>
</Condition>

@code {
    private string DefaultCurrency => CurrencyProvider.DefaultCurrency.IsoCode;

    [CascadingParameter] Guid OwnerId { get; set; }

    [EditorRequired][Parameter] public EventCallback<AccountDetailViewModel> OnEditAccount { get; set; }
    [EditorRequired][Parameter] public EventCallback<AccountDetailViewModel> OnDeleteAccount { get; set; }
    [EditorRequired][Parameter] public required Dictionary<string, AccountListModel> Accounts { get; set; }

    [Parameter] public Currency? SelectedCurrency { get; set; }

    private Dictionary<string, List<KeyValuePair<string, AccountListModel>>> AccountsGroupedByType { get; set; } = [];

    private AccountListModel[] CurrencyAccounts { get; set; } = [];

    private HashSet<string> ExpandedPanels { get; set; } = [];

    private CultureInfo? _customCulture;

    private string[] _uniqueCurrencies = [];

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        AccountsGroupedByType = Accounts
            .Where(kvp => kvp.Value.Accounts.Any())
            .ToDictionary(
                kvp => kvp.Key,
                kvp => kvp.Value.Accounts
                    .GroupBy(account => account.Currency!.IsoCode)
                    .Where(group => group.Any())
                    .Select(group => new KeyValuePair<string, AccountListModel>(
                        group.Key,
                        new AccountListModel(kvp.Value.Type, kvp.Value.DisplayName, kvp.Value.Icon)
                            {
                                Accounts = group.ToList()
                            }
                    ))
                    .ToList()
            );

        _uniqueCurrencies = AccountsGroupedByType.Values
            .SelectMany(accountLists => accountLists.Select(accountList => accountList.Key))
            .Distinct()
            .Order()
            .ToArray();

        if (_uniqueCurrencies.Length == 0) return;

        var currencyCode = SelectedCurrency?.IsoCode ?? DefaultCurrency;

        if (!_uniqueCurrencies.Contains(currencyCode)) currencyCode = _uniqueCurrencies[0];

        SelectCurrencyAccounts(currencyCode);

        _customCulture = new CultureInfo(CultureInfo.CurrentCulture.Name)
        {
            NumberFormat =
            {
                CurrencySymbol = SelectedCurrency!.Symbol,
                CurrencyDecimalDigits = 0
            }
        };
    }

    private void Expanded(string key, bool isExpanded) => _ = isExpanded ? ExpandedPanels.Add(key) : ExpandedPanels.Remove(key);

    private void SelectCurrencyAccounts(string currency)
    {
        ExpandedPanels.Clear();

        CurrencyAccounts = AccountsGroupedByType.Where(group => group.Value.Any(currencyGroup => currencyGroup.Key == currency))
                                                .Select(group => group.Value.First(currencyGroup => currencyGroup.Key == currency).Value)
                                                .ToArray();

        if (CurrencyAccounts.Length > 0)
            SelectedCurrency = CurrencyAccounts[0].Accounts[0].Currency;
    }

    private async Task DeleteAccount(AccountDetailViewModel account)
    {
        await OnDeleteAccount.InvokeAsync(account);
    }

    private void EditAccount(AccountDetailViewModel account)
    {
        DrawerService.ToggleDrawer("Edit Account Details");
    }

    private async Task UpdateAccountAsync(AccountDetailViewModel account)
    {
        await OnEditAccount.InvokeAsync(account);
    }

    private BalanceModel SavingsSummary() => new("I Have", GetBalance(BalanceType.Asset), "I Owe", GetBalance(BalanceType.Liability))
    {
        Amount = (lineOne, lineTwo) => lineOne - lineTwo,
        BarMax = (lineOne, lineTwo) => lineOne + lineTwo,
        BarValue = (lineOne, _) => lineOne
    };

    private BalanceModel LoanSummary()
    {
        var payable = GetLimit(BalanceType.Payable);
        var receivable = GetLimit(BalanceType.Receivable);

        return new("I Have", GetBalance(BalanceType.Payable), "I am Owed", GetBalance(BalanceType.Receivable))
        {
            Amount = (lineOne, _) => lineOne,
            BarMax = (_, _) => payable + receivable,
            BarValue = (lineOne, lineTwo) => (payable - lineOne) + (receivable - lineTwo)
        };
    }

    private BalanceModel NetWorth()
    {
        var assets = GetBalance(BalanceType.Asset) + GetBalance(BalanceType.Deferred) + GetLimit(BalanceType.Receivable);
        var liabilities = GetBalance(BalanceType.Liability) + GetBalance(BalanceType.Payable);

        return new("I Have", assets, "I Owe", liabilities)
        {
            Amount = (_, _) => assets - liabilities,
            BarMax = (_, _) => assets,
            BarValue = (_, _) => assets - liabilities
        };
    }

    private double GetBalance(BalanceType type) => CurrencyAccounts
        .Where(model => model.Type == type)
        .SelectMany(model => model.Accounts)
        .Sum(account => (double)account.Balance);

    private double GetLimit(BalanceType type) => CurrencyAccounts
        .Where(model => model.Type == type)
        .SelectMany(model => model.Accounts)
        .Sum(account => 0); //TODO - (double)account.Limit
}

<style>
    .header-text {
        line-height: 1.4 !important;
        align-self: center !important;
        font-size: 1.1rem !important;
        letter-spacing: 0.025em !important;
    }
</style>

