@implements IFragment
@inject CurrencyProvider CurrencyProvider

<MudForm Model="@_model" @ref="_form" @bind-IsValid="_success" ValidationDelay="0" Spacing="4">
    <Condition Evaluation="ManagedByInstitution">
        <Match>
            <MudTextField T="string" @bind-Value="_model.Alias" For="@(() => _model.Alias!)" Label="@AliasLabel" 
                          Placeholder="@AliasPlaceholder" Margin="Margin.Dense" MaxLength="15"
                          Immediate Required RequiredError="Title is required!" 
                          HelperTextOnFocus HelperText="Max. 15 characters" />
        </Match>
    </Condition>
    <MudTextField T="string" @bind-Value="_model.Title" For="@(() => _model.Title!)" Immediate Margin="Margin.Dense"
                  Placeholder="New Account" Required RequiredError="Title is required!" HelperTextOnFocus
                  MaxLength="15" HelperText="Max. 15 characters" />
    <MudStack Row="true" Justify="Justify.SpaceBetween">
        <MudTextField T="decimal?" @bind-Value="_model.Balance" For="@(() => _model.Balance)" Immediate="true" Margin="Margin.Dense"
                      Required="true" RequiredError="Amount is required!" Label="@(AccountType == AccountType.Loan ? "Initial Sum" : "Balance")"
                      Disabled="@IsUpdate"/>
        <MudSelect OuterClass="mt-2" T="Currency" @bind-Value="_model.Currency" For="@(() => _model.Currency!)" Immediate Style="width:120px;"
                   Margin="Margin.Dense" Dense Variant="Variant.Outlined" Required="true" RequiredError="Currency is required!"
                   Disabled="@IsUpdate">
            <Iteration Items="@CurrencyProvider.Currencies" Context="currency">
                <MudSelectItem Value="@currency">@currency.IsoCode</MudSelectItem>
            </Iteration>
        </MudSelect>
    </MudStack>
    <Condition Evaluation="@(_model.AccountType == AccountType.Credit || _model.AccountType == AccountType.Loan)">
        <Match>
            <MudDatePicker @bind-Date="_model.EffectiveDate" For="@(() => _model.EffectiveDate)" Margin="Margin.Dense"
                           Label="@(_model.AccountType == AccountType.Credit ? "Statement Date" : "Maturity Date")"
                           Required RequiredError="Date is required!" />
        </Match>
    </Condition>
    <Condition Evaluation="@(_model.AccountType == AccountType.Loan && !IsUpdate)">
        <Match>
            <MudSelect OuterClass="mt-2" T="Guid?" @bind-Value="_model.AssociatedAccountId" For="@(() => _model.AssociatedAccountId!)" Variant="Variant.Text"
                       Margin="Margin.Dense" AnchorOrigin="Origin.BottomCenter" RequiredError="Associated account is required!"
                       Dense Immediate Required Placeholder="Associated Account" Label="Associated Account">
                <Iteration Items="AvailableAccounts" Context="account">
                    <MudSelectItem T="Guid?" Value="@account.AccountId">@account.Name</MudSelectItem>
                </Iteration>
            </MudSelect>
        </Match>
    </Condition>
    <Condition Evaluation="@(_model.AccountType != AccountType.Cash)">
        <Match>
            <MudSelect OuterClass="mt-2" T="string" @bind-Value="_model.SubType" For="@(() => _model.SubType!)" Variant="Variant.Text"
                       Margin="Margin.Dense" AnchorOrigin="Origin.BottomCenter" RequiredError="Type is required!"
                       Dense Immediate Required Placeholder="Select Type" Label="Type"
                       Disabled="@(IsUpdate && AccountType == AccountType.Loan)">
                <Iteration Items="@GetSubTypes()" Context="subType">
                    <MudSelectItem Value="@subType">@subType.Humanize()</MudSelectItem>
                </Iteration>
            </MudSelect>
        </Match>
    </Condition>
    <MudStack Row="true" Class="pt-4" Justify="Justify.FlexEnd">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_success)" OnClick="@Submit">@(IsUpdate ? "Update" : "Create")</MudButton>
    </MudStack>
</MudForm>

@code {
    private bool _success;
    private MudForm? _form;
    private readonly AccountDetailModel _model = new();
    private bool IsUpdate => AccountDetailViewModel?.AccountId is not null;

    private bool ManagedByInstitution => _model.AccountType == AccountType.Credit
                                      || _model.AccountType == AccountType.Deposit
                                      || _model.AccountType == AccountType.Investment 
                                      || _model.AccountType == AccountType.Loan;

    private string AliasPlaceholder => _model.AccountType == AccountType.Loan ? "Third Party Name" : "Name of Institution";
    private string AliasLabel => _model.AccountType == AccountType.Loan ? "Source" : "Institution";

    [Parameter]
    public AccountType AccountType { get; set; }

    [Parameter]
    public AccountDetailViewModel? AccountDetailViewModel { get; set; }

    [Parameter]
    public IEnumerable<AccountViewModel> AvailableAccounts { get; set; } = [];

    [Parameter] 
    public Action<AccountDetailViewModel> CallbackMethod { get; set; } = null!;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (AccountDetailViewModel is null)
        {
            _model.AccountType = AccountType;
            _model.SubType = GetSubTypes().LastOrDefault();
            _model.Currency = CurrencyProvider.DefaultCurrency;
        }
        else
        {
            _model.Title = AccountDetailViewModel.Name;
            _model.Alias = AccountDetailViewModel.Alias;
            _model.Balance = AccountDetailViewModel.Balance;
            _model.Currency = AccountDetailViewModel.Currency!;
            _model.AccountType = AccountDetailViewModel.AccountType;
            _model.SubType = AccountDetailViewModel.SubType;
            _model.EffectiveDate = AccountDetailViewModel.EffectiveDate;
        }
    }

    private async Task Submit()
    {
        await _form!.Validate();

        if (_form.IsValid)
        {
            var account = AccountDetailViewModel ?? new AccountDetailViewModel();

            account.Name = _model.Title.Transform(To.TitleCase);
            account.Alias = _model.Alias?.Transform(To.TitleCase);
            account.Currency = _model.Currency;
            account.Balance = _model.Balance ?? 0;
            account.AccountType = _model.AccountType;
            account.EffectiveDate = _model.EffectiveDate;
            account.AssociatedAccountId = _model.AssociatedAccountId;
            account.SubType = _model.SubType;

            CallbackMethod.Invoke(account);
        }
    }
}
