@page "/bucket"
@using OpenBudgeteer.Core.Common
@using OpenBudgeteer.Core.ViewModels
@using OpenBudgeteer.Core.ViewModels.ItemViewModels
@using Microsoft.EntityFrameworkCore
@using System.Drawing
@using System.Globalization
@inject DbContextOptions<DatabaseContext> DbContextOptions
@inject YearMonthSelectorViewModel YearMonthDataContext

<style>
	/* Overwrite custom styles */
	.col-numbers {
        width: 90px;
    }
	.col-buttons {
        width: 120px;
    }  
	.table td {
        border-top: none;
		border-bottom: 1px solid #dee2e6;
    }

    /* Page specific styles */
    hr.tile-divider {
        margin-top: 0.3rem;
        margin-bottom: 0.3rem;
    }
    span.tile-header {
        font-weight: bold;
    }
    div.header-stats-tile {
        margin-bottom: 0.4rem;
    }
    .bucketgroup-header-text {
        font-size: 1rem;
        vertical-align: middle;
    }
	button.collapse-button {
        font-family: "Segoe UI Symbol";
        padding: 0;
        height: 25px;
        width: 25px;
    }
	button.collapse-button:focus, button.collapse-button:active {
        outline: none;
		box-shadow: none;
    }
    .col-details {
        width: 250px;
    }
    .borderless td, .borderless th {
        border-bottom: none;
    }
</style>

<div class="row" style="margin:0 0 1rem 0">
    <div class="col header-stats-tile">
        <div class="row">
            <div class="col-md-auto no-gutters">
                <img src="https://img.icons8.com/officel/60/000000/refund.png"/>
            </div>
            <div class="col" style="text-align: center">
                <span class="tile-header">Income</span>
                <hr class="tile-divider"/>
                <span>@_dataContext.Income.ToString("C", CultureInfo.CurrentCulture)</span>
            </div>
        </div>
    </div>
    <div class="col header-stats-tile">
        <div class="row">
            <div class="col-md-auto no-gutters">
                <img src="https://img.icons8.com/officel/60/000000/cash-in-hand.png"/>
            </div>
            <div class="col" style="text-align: center">
                <span class="tile-header">Expenses</span>
                <hr class="tile-divider"/>
                <span>@_dataContext.Expenses.ToString("C", CultureInfo.CurrentCulture)</span>
            </div>
        </div>
    </div>
    <div class="col header-stats-tile">
        <div class="row">
            <div class="col-md-auto no-gutters">
                <img src="https://img.icons8.com/officel/60/000000/exchange.png"/>
            </div>
            <div class="col" style="text-align: center">
                <span class="tile-header">Month Balance</span>
                <hr class="tile-divider"/>
                <span>@_dataContext.MonthBalance.ToString("C", CultureInfo.CurrentCulture)</span>
            </div>
        </div>
    </div>
    <div class="col header-stats-tile">
        <div class="row">
            <div class="col-md-auto no-gutters">
                <img src="https://img.icons8.com/officel/60/000000/merchant-account.png"/>
            </div>
            <div class="col" style="text-align: center">
                <span class="tile-header">Bank Balance</span>
                <hr class="tile-divider"/>
                <span>@_dataContext.BankBalance.ToString("C", CultureInfo.CurrentCulture)</span>
            </div>
        </div>
    </div>
    <div class="w-100 header-stats-tile">
        <hr/>
    </div>
    <div class="col header-stats-tile">
        <div class="row">
            <div class="col-md-auto no-gutters">
                <img src="https://img.icons8.com/officel/60/000000/banknotes.png"/>
            </div>
            <div class="col" style="text-align: center">
                <span class="tile-header">Budget</span>
                <hr class="tile-divider"/>
                <span>@_dataContext.Budget.ToString("C", CultureInfo.CurrentCulture)</span>
            </div>
        </div>
    </div>
    <div class="col header-stats-tile">
        <div class="row">
            <div class="col-md-auto no-gutters">
                <img src="https://img.icons8.com/officel/60/000000/receive-cash.png"/>
            </div>
            <div class="col" style="text-align: center">
                <span class="tile-header">Pending Want</span>
                <hr class="tile-divider"/>
                <span>@_dataContext.PendingWant.ToString("C", CultureInfo.CurrentCulture)</span>
            </div>
        </div>
    </div>
    <div class="col header-stats-tile">
        <div class="row">
            <div class="col-md-auto no-gutters">
                <img src="https://img.icons8.com/officel/60/000000/money-bag-euro.png"/>
            </div>
            <div class="col" style="text-align: center">
                <span class="tile-header">Remaining Budget</span>
                <hr class="tile-divider"/>
                <span>@_dataContext.RemainingBudget.ToString("C", CultureInfo.CurrentCulture)</span>
            </div>
        </div>
    </div>
    <div class="col header-stats-tile">
        <div class="row">
            <div class="col-md-auto no-gutters">
                <img src="https://img.icons8.com/officel/60/000000/high-priority.png"/>
            </div>
            <div class="col" style="text-align: center">
                <span class="tile-header">Negative Bucket Balance</span>
                <hr class="tile-divider"/>
                <span>@_dataContext.NegativeBucketBalance.ToString("C", CultureInfo.CurrentCulture)</span>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col">
        <button class="btn btn-sm btn-primary header-action-button" @onclick="@CreateGroup">Create Bucket Group</button>
        <button class="btn btn-sm btn-primary header-action-button" @onclick="@DistributeBudget">Distribute Budget</button>
        <button class="btn btn-sm btn-primary header-action-button" @onclick="@(() => _dataContext.ChangeBucketGroupCollapse())">Collapse All</button>
		<button class="btn btn-sm btn-primary header-action-button" @onclick="@(() => _dataContext.ChangeBucketGroupCollapse(false))">Expend All</button>
    </div>
    <YearMonthSelector DataContext="YearMonthDataContext"/>
</div>

<table class="table table-sm">
    <thead>
    <tr class="header-row">
        <th>Bucket</th>
        <th class="col-numbers">Balance</th>
        <th class="col-numbers">InOut</th>
        <th class="col-numbers">Want</th>
        <th class="col-numbers">In</th>
        <th class="col-numbers">Activity</th>
        <th class="col-details">Details</th>
		<th class="col-buttons"></th>
    </tr>
    </thead>
</table>

@foreach (var bucketGroup in _dataContext.BucketGroups)
{
    <table class="table table-sm">
        <thead>
        <tr class="header-row" @onmouseover="() => bucketGroup.IsHovered = true" @onmouseout="() => bucketGroup.IsHovered = false">
            @if (bucketGroup.InModification)
            {
                <th colspan="8">
                    <div class="row" style="max-width: 500px">
                        <div class="col">
							<input class="form-control form-control-sm" type="text" @bind="bucketGroup.BucketGroup.Name"/>
                        </div>
                        <div class="col-3 col-buttons">
							<button class="btn btn-sm btn-primary" @onclick="@(() => HandleResult(bucketGroup.SaveModification()))">Ok</button>
                            <button class="btn btn-sm btn-danger" @onclick="@(() => bucketGroup.CancelModification())">Cancel</button>
                        </div>
                    </div>
                </th>
            }
            else
            {
                <th>
                    <div>
						<button class="btn btn-sm header-action-button collapse-button" 
                                @onclick="@(() => bucketGroup.IsCollapsed = !bucketGroup.IsCollapsed)"><span>@(bucketGroup.IsCollapsed ? "▶" : "▼")</span></button>
                        <span class="bucketgroup-header-text">@bucketGroup.BucketGroup.Name</span>
                    </div>
                </th>
                <th class="col-numbers"><span class="bucketgroup-header-text">@bucketGroup.TotalBalance.ToString("N2")</span></th>
                <th class="col-numbers"></th>                                                                                            
                <th class="col-numbers"></th>
                <th class="col-numbers"></th>
                <th class="col-numbers"></th>
                <th class="col-buttons" colspan="2" style="width: 370px">
                    @if (bucketGroup.IsHovered)
                    {
                        <button class="btn btn-sm btn-primary oi oi-pencil" @onclick="@(() => bucketGroup.StartModification())"></button>
                        <button class="btn btn-sm btn-primary oi oi-arrow-top" @onclick="@(() => HandleResult(bucketGroup.MoveGroup(-1)))"></button>
                        <button class="btn btn-sm btn-primary oi oi-arrow-bottom" @onclick="@(() => HandleResult(bucketGroup.MoveGroup(1)))"></button>
                        <button class="btn btn-sm btn-danger oi oi-trash" @onclick="@(() => HandleResult(_dataContext.DeleteGroup(bucketGroup)))"></button>
                        <button class="btn btn-sm btn-primary oi oi-plus" @onclick="@(() => CreateBucket(bucketGroup))"></button>
                    }
                </th>
            }
        </tr>
        </thead>
        @* Empty row required to keep column width after collapse *@
		<tr class="borderless">
            <td></td>
            <td class="col-numbers"></td>
            <td class="col-numbers"></td>
            <td class="col-numbers"></td>
            <td class="col-numbers"></td>
            <td class="col-numbers"></td>
            <td class="col-details"></td>
			<td class="col-buttons"></td>
        </tr>
        <tbody class="@(bucketGroup.IsCollapsed ? "collapse" : "")">
        
        @foreach (var bucket in bucketGroup.Buckets)
        {
            <tr @onmouseover="() => bucket.IsHovered = true" @onmouseout="() => bucket.IsHovered = false">
                <td>
                    @if (bucket.Bucket.IsInactive)
                    {
                        <div style="background-color: @ColorTranslator.ToHtml(bucket.Bucket.Color); border-radius: 25px; padding: 5px 10px">
                            @($"{bucket.Bucket.Name} (Inactive from: {bucket.Bucket.IsInactiveFrom.ToShortDateString()})")
                        </div>
                    }
                    else
                    {
                        <div style="background-color: @ColorTranslator.ToHtml(bucket.Bucket.Color); border-radius: 25px; padding: 5px 10px">@bucket.Bucket.Name</div>
                    }
                </td>
                <td class="col-numbers">@bucket.Balance.ToString("N2")</td>
                <td class="col-numbers">
                    <input class="form-control form-control-sm" style="text-align: right;" type="number"
                           @bind="bucket.InOut"
                           @onkeyup="@(args => InOut_Changed(bucket, args))"/>
                </td>
                <td class="col-numbers">@(bucket.Want == 0 ? string.Empty : bucket.Want.ToString("N2"))</td>
                <td class="col-numbers">@(bucket.In == 0 ? string.Empty : bucket.In.ToString("N2"))</td>
                <td class="col-numbers">@(bucket.Activity == 0 ? string.Empty : bucket.Activity.ToString("N2"))</td>
                <td class="col-details">
                    @if (bucket.IsProgressbarVisible)
                    {
                        <div class="row">
                            <div class="col">
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar" style="width: @bucket.Progress%;" aria-valuenow="@bucket.Progress" aria-valuemin="0" aria-valuemax="100">
                                        @bucket.Progress%
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col" style="font-size: .75rem; text-align: center">
                                @bucket.Details
                            </div>
                        </div>
                    }
                </td>
                <td class="col-buttons">
                    @if (bucket.IsHovered)
                    {
                        <button class="btn btn-sm btn-primary oi oi-list" @onclick="@(() => DisplayBucketTransactions(bucket))"></button>
                        <button class="btn btn-sm btn-primary oi oi-pencil" @onclick="@(() => ShowEditBucketDialog(bucket))"></button>
                        <button class="btn btn-sm btn-danger oi oi-trash" @onclick="@(() => CloseBucket(bucket))"></button>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
}

<EditBucketDialog 
    Title="Edit Bucket"
    DataContext="@_editBucketDialogDataContext"
    IsDialogVisible="@_isEditBucketModalDialogVisible"
    OnCancelClickCallback="@(() => CancelEditBucketDialog())"
    OnSaveClickCallback="@(() => SaveAndCloseEditBucketDialog())"/>

<TransactionDialog 
    Title="Bucket Transactions" 
    DataContext="@_transactionModalDialogDataContext" 
    IsDialogVisible="@_isTransactionModalDialogVisible" 
    IsDialogLoading="@_isTransactionModalDialogDataContextLoading"
    CurrentBucket ="@_transactionModalDialogBucket"
    OnClickCallback="@(() => _isTransactionModalDialogVisible = false)"/>

<ErrorMessageDialog 
    Title="Bucket" 
    Message="@_errorModalDialogMessage" 
    IsDialogVisible="@_isErrorModalDialogVisible"
    OnClickCallback="@(() => _isErrorModalDialogVisible = false)"/>

@code {
    BucketViewModel _dataContext;

    BucketViewModelItem _editBucketDialogDataContext;
    bool _isEditBucketModalDialogVisible;

    TransactionViewModel _transactionModalDialogDataContext;
    OpenBudgeteer.Core.Models.Bucket _transactionModalDialogBucket;
    bool _isTransactionModalDialogVisible;
    bool _isTransactionModalDialogDataContextLoading;

    bool _isErrorModalDialogVisible;
    string _errorModalDialogMessage;

    protected override async Task OnInitializedAsync()
    {
        _dataContext = new BucketViewModel(DbContextOptions, YearMonthDataContext);

        HandleResult(await _dataContext.LoadDataAsync());
        _dataContext.ViewModelReloadRequired += async (sender, args) =>
        {
            HandleResult(await _dataContext.LoadDataAsync());
            StateHasChanged();
        };

        YearMonthDataContext.SelectedYearMonthChanged += async (sender, args) => 
        {
            HandleResult(await _dataContext.LoadDataAsync());
            StateHasChanged();
        };
    }

    void CreateGroup()
    {
        HandleResult(_dataContext.CreateGroup());
    }

    void DistributeBudget()
    {
        HandleResult(_dataContext.DistributeBudget());
    }

    void CreateBucket(BucketGroupViewModelItem bucketGroup)
    {
        var newBucket = bucketGroup.CreateBucket();
        ShowEditBucketDialog(newBucket);
    }

    void ShowEditBucketDialog(BucketViewModelItem bucket)
    {
        _editBucketDialogDataContext = bucket;
        _isEditBucketModalDialogVisible = true;
    }

    void SaveAndCloseEditBucketDialog()
    {
        _isEditBucketModalDialogVisible = false;
        SaveChanges(_editBucketDialogDataContext);
    }

    async void CancelEditBucketDialog()
    {
        _isEditBucketModalDialogVisible = false;
        HandleResult(await _dataContext.LoadDataAsync());
        StateHasChanged();
    }

    void SaveChanges(BucketViewModelItem bucket)
    {
        HandleResult(_dataContext.SaveChanges(bucket));
        StateHasChanged();
    }

    void CloseBucket(BucketViewModelItem bucket)
    {
        HandleResult(_dataContext.CloseBucket(bucket));
        StateHasChanged();
    }

    void HandleResult(Tuple<bool, string> result)
    {
        var (success, errorMessage) = result;
        if (!success)
        {
            _errorModalDialogMessage = errorMessage;
            _isErrorModalDialogVisible = true;
        }
    }

    void InOut_Changed(BucketViewModelItem bucket, KeyboardEventArgs args)
    {
        var result = bucket.HandleInOutInput(args.Key);
        if (result.Item1)
        {
            HandleResult(_dataContext.UpdateBalanceFigures());
            StateHasChanged();
        }
        else
        {
            HandleResult(result);
        }
    }

    async void DisplayBucketTransactions(BucketViewModelItem bucket)
    {
        _isTransactionModalDialogVisible = true;
        _isTransactionModalDialogDataContextLoading = true;

        _transactionModalDialogDataContext = new TransactionViewModel(DbContextOptions, YearMonthDataContext);
        _transactionModalDialogBucket = bucket.Bucket;
        HandleResult(await _transactionModalDialogDataContext.LoadDataAsync(bucket.Bucket, true));

        _isTransactionModalDialogDataContextLoading = false;
        StateHasChanged();
    }
}
